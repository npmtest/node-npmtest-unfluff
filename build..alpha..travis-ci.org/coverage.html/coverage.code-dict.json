{"/home/travis/build/npmtest/node-npmtest-unfluff/test.js":"/* istanbul instrument in package npmtest_unfluff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-unfluff/lib.npmtest_unfluff.js":"/* istanbul instrument in package npmtest_unfluff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_unfluff = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_unfluff = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-unfluff/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-unfluff && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_unfluff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_unfluff\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_unfluff.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_unfluff.rollup.js'] =\n            local.assetsDict['/assets.npmtest_unfluff.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_unfluff.__dirname +\n                    '/lib.npmtest_unfluff.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-unfluff/node_modules/unfluff/lib/unfluff.js":"// Generated by CoffeeScript 2.0.0-beta7\nvoid function () {\n  var cheerio, cleaner, extractor, getCleanedDoc, getParsedDoc, getTopNode, unfluff;\n  cheerio = require('cheerio');\n  extractor = require('./extractor');\n  cleaner = require('./cleaner');\n  module.exports = unfluff = function (html, language) {\n    var doc, lng, pageData, topNode;\n    doc = cheerio.load(html);\n    lng = language || extractor.lang(doc);\n    pageData = {\n      title: extractor.title(doc),\n      softTitle: extractor.softTitle(doc),\n      date: extractor.date(doc),\n      author: extractor.author(doc),\n      publisher: extractor.publisher(doc),\n      copyright: extractor.copyright(doc),\n      favicon: extractor.favicon(doc),\n      description: extractor.description(doc),\n      keywords: extractor.keywords(doc),\n      lang: lng,\n      canonicalLink: extractor.canonicalLink(doc),\n      tags: extractor.tags(doc),\n      image: extractor.image(doc)\n    };\n    cleaner(doc);\n    topNode = extractor.calculateBestNode(doc, lng);\n    pageData.videos = extractor.videos(doc, topNode);\n    pageData.links = extractor.links(doc, topNode, lng);\n    pageData.text = extractor.text(doc, topNode, lng);\n    return pageData;\n  };\n  unfluff.lazy = function (html, language) {\n    return {\n      title: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.title_ ? this.title_ : this.title_ = extractor.title(doc);\n      },\n      softTitle: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.softTitle_ ? this.softTitle_ : this.softTitle_ = extractor.softTitle(doc);\n      },\n      date: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.date_ ? this.date_ : this.date_ = extractor.date(doc);\n      },\n      copyright: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.copyright_ ? this.copyright_ : this.copyright_ = extractor.copyright(doc);\n      },\n      author: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.author_ ? this.author_ : this.author_ = extractor.author(doc);\n      },\n      publisher: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.publisher_ ? this.publisher_ : this.publisher_ = extractor.publisher(doc);\n      },\n      favicon: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.favicon_ ? this.favicon_ : this.favicon_ = extractor.favicon(doc);\n      },\n      description: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.description_ ? this.description_ : this.description_ = extractor.description(doc);\n      },\n      keywords: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.keywords_ ? this.keywords_ : this.keywords_ = extractor.keywords(doc);\n      },\n      lang: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.language_ ? this.language_ : this.language_ = language || extractor.lang(doc);\n      },\n      canonicalLink: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.canonicalLink_ ? this.canonicalLink_ : this.canonicalLink_ = extractor.canonicalLink(doc);\n      },\n      tags: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.tags_ ? this.tags_ : this.tags_ = extractor.tags(doc);\n      },\n      image: function () {\n        var doc;\n        doc = getParsedDoc.call(this, html);\n        return null != this.image_ ? this.image_ : this.image_ = extractor.image(doc);\n      },\n      videos: function () {\n        var doc, topNode;\n        if (null != this.videos_)\n          return this.videos_;\n        doc = getCleanedDoc.call(this, html);\n        topNode = getTopNode.call(this, doc, this.lang());\n        return this.videos_ = extractor.videos(doc, topNode);\n      },\n      text: function () {\n        var doc, topNode;\n        if (null != this.text_)\n          return this.text_;\n        doc = getCleanedDoc.call(this, html);\n        topNode = getTopNode.call(this, doc, this.lang());\n        return this.text_ = extractor.text(doc, topNode, this.lang());\n      },\n      links: function () {\n        var doc, topNode;\n        if (null != this.links_)\n          return this.links_;\n        doc = getCleanedDoc.call(this, html);\n        topNode = getTopNode.call(this, doc, this.lang());\n        return this.links_ = extractor.links(doc, topNode, this.lang());\n      }\n    };\n  };\n  getParsedDoc = function (html) {\n    return null != this.doc_ ? this.doc_ : this.doc_ = cheerio.load(html);\n  };\n  getTopNode = function (doc, lng) {\n    return null != this.topNode_ ? this.topNode_ : this.topNode_ = extractor.calculateBestNode(doc, lng);\n  };\n  getCleanedDoc = function (html) {\n    var doc;\n    if (null != this.cleanedDoc_)\n      return this.cleanedDoc_;\n    doc = getParsedDoc.call(this, html);\n    this.cleanedDoc_ = cleaner(doc);\n    return this.cleanedDoc_;\n  };\n}.call(this);\n","/home/travis/build/npmtest/node-npmtest-unfluff/node_modules/unfluff/lib/extractor.js":"// Generated by CoffeeScript 2.0.0-beta7\nvoid function () {\n  var _, addSiblings, biggestTitleChunk, cleanText, cleanTitle, formatter, getObjectTag, getScore, getSiblingsContent, getSiblingsScore, getVideoAttrs, isBoostable, isHighlinkDensity, isNodescoreThresholdMet, isTableAndNoParaExist, postCleanup, rawTitle, stopwords, updateNodeCount, updateScore;\n  _ = require('lodash');\n  stopwords = require('./stopwords');\n  formatter = require('./formatter');\n  module.exports = {\n    date: function (doc) {\n      var cache$, cache$1, cache$2, cache$3, cache$4, dateCandidates;\n      dateCandidates = doc(\"meta[property='article:published_time'],     meta[itemprop*='datePublished'], meta[name='dcterms.modified'],     meta[name='dcterms.date'],     meta[name='DC.date.issued'],  meta[name='dc.date.issued'],     meta[name='dc.date.modified'], meta[name='dc.date.created'],     meta[name='DC.date'],     meta[name='DC.Date'],     meta[name='dc.date'],     meta[name='date'],     time[itemprop*='pubDate'],     time[itemprop*='pubdate'],     span[itemprop*='datePublished'],     span[property*='datePublished'],     p[itemprop*='datePublished'],     p[property*='datePublished'],     div[itemprop*='datePublished'],     div[property*='datePublished'],     li[itemprop*='datePublished'],     li[property*='datePublished'],     time,     span[class*='date'],     p[class*='date'],     div[class*='date']\");\n      return (null != dateCandidates && null != (cache$ = dateCandidates.first()) && null != (cache$1 = cache$.attr('content')) ? cache$1.trim() : void 0) || (null != dateCandidates && null != (cache$2 = dateCandidates.first()) && null != (cache$3 = cache$2.attr('datetime')) ? cache$3.trim() : void 0) || cleanText(null != dateCandidates && null != (cache$4 = dateCandidates.first()) ? cache$4.text() : void 0) || null;\n    },\n    copyright: function (doc) {\n      var cache$, copyright, copyrightCandidates, text;\n      copyrightCandidates = doc(\"p[class*='copyright'], div[class*='copyright'], span[class*='copyright'], li[class*='copyright'],     p[id*='copyright'], div[id*='copyright'], span[id*='copyright'], li[id*='copyright']\");\n      text = null != copyrightCandidates && null != (cache$ = copyrightCandidates.first()) ? cache$.text() : void 0;\n      if (!text) {\n        text = doc('body').text().replace(/\\s*[\\r\\n]+\\s*/g, '. ');\n        if (!(text.indexOf('\\xa9') > 0))\n          return null;\n      }\n      copyright = text.replace(/.*?©(\\s*copyright)?([^,;:.|\\r\\n]+).*/gi, '$2').trim();\n      return cleanText(copyright);\n    },\n    author: function (doc) {\n      var authorCandidates, authorList, cache$, cache$1, cache$2, cache$3, cache$4, cache$5, fallbackAuthor;\n      authorCandidates = doc(\"meta[property='article:author'],     meta[property='og:article:author'], meta[name='author'],     meta[name='dcterms.creator'],     meta[name='DC.creator'],     meta[name='DC.Creator'],     meta[name='dc.creator'],     meta[name='creator']\");\n      authorList = [];\n      authorCandidates.each(function () {\n        var author, cache$, cache$1;\n        author = null != (cache$ = doc(this)) && null != (cache$1 = cache$.attr('content')) ? cache$1.trim() : void 0;\n        if (author)\n          return authorList.push(author);\n      });\n      if (authorList.length === 0) {\n        fallbackAuthor = (null != (cache$ = doc(\"span[class*='author']\").first()) ? cache$.text() : void 0) || (null != (cache$1 = doc(\"p[class*='author']\").first()) ? cache$1.text() : void 0) || (null != (cache$2 = doc(\"div[class*='author']\").first()) ? cache$2.text() : void 0) || (null != (cache$3 = doc(\"span[class*='byline']\").first()) ? cache$3.text() : void 0) || (null != (cache$4 = doc(\"p[class*='byline']\").first()) ? cache$4.text() : void 0) || (null != (cache$5 = doc(\"div[class*='byline']\").first()) ? cache$5.text() : void 0);\n        if (fallbackAuthor)\n          authorList.push(cleanText(fallbackAuthor));\n      }\n      return authorList;\n    },\n    publisher: function (doc) {\n      var cache$, cache$1, publisherCandidates;\n      publisherCandidates = doc(\"meta[property='og:site_name'],     meta[name='dc.publisher'],     meta[name='DC.publisher'],     meta[name='DC.Publisher']\");\n      if (null != publisherCandidates && null != (cache$ = publisherCandidates.first()) && null != (cache$1 = cache$.attr('content')))\n        return cache$1.trim();\n    },\n    title: function (doc) {\n      var titleText;\n      titleText = rawTitle(doc);\n      return cleanTitle(titleText, [\n        '|',\n        ' - ',\n        '\\xbb',\n        ':'\n      ]);\n    },\n    softTitle: function (doc) {\n      var titleText;\n      titleText = rawTitle(doc);\n      return cleanTitle(titleText, [\n        '|',\n        ' - ',\n        '\\xbb'\n      ]);\n    },\n    text: function (doc, topNode, lang) {\n      if (topNode) {\n        topNode = postCleanup(doc, topNode, lang);\n        return formatter(doc, topNode, lang);\n      } else {\n        return '';\n      }\n    },\n    image: function (doc) {\n      var images;\n      images = doc(\"meta[property='og:image'], meta[itemprop=image], meta[name='twitter:image:src'], meta[name='twitter:image'], meta[name='twitter:image0']\");\n      if (images.length > 0 && images.first().attr('content'))\n        return images.first().attr('content');\n      return null;\n    },\n    links: function (doc, topNode, lang) {\n      var gatherLinks, links;\n      links = [];\n      gatherLinks = function (doc, topNode) {\n        var nodes;\n        nodes = topNode.find('a');\n        return nodes.each(function () {\n          var href, text;\n          href = doc(this).attr('href');\n          text = doc(this).html();\n          if (href && text)\n            return links.push({\n              text: text,\n              href: href\n            });\n        });\n      };\n      if (topNode) {\n        topNode = postCleanup(doc, topNode, lang);\n        gatherLinks(doc, topNode);\n      }\n      return links;\n    },\n    videos: function (doc, topNode) {\n      var candidates, results, urls, videoList;\n      videoList = [];\n      candidates = doc(topNode).find('iframe, embed, object, video');\n      candidates.each(function () {\n        var candidate, tag;\n        candidate = doc(this);\n        tag = candidate[0].name;\n        if (tag === 'embed') {\n          if (candidate.parent() && candidate.parent()[0].name === 'object') {\n            return videoList.push(getObjectTag(doc, candidate));\n          } else {\n            return videoList.push(getVideoAttrs(doc, candidate));\n          }\n        } else if (tag === 'object') {\n          return videoList.push(getObjectTag(doc, candidate));\n        } else if (tag === 'iframe' || tag === 'video') {\n          return videoList.push(getVideoAttrs(doc, candidate));\n        }\n      });\n      urls = [];\n      results = [];\n      _.each(videoList, function (vid) {\n        if (vid && vid.height && vid.width && urls.indexOf(vid.src) === -1) {\n          results.push(vid);\n          return urls.push(vid.src);\n        }\n      });\n      return results;\n    },\n    favicon: function (doc) {\n      var tag;\n      tag = doc('link').filter(function () {\n        var cache$;\n        return (null != (cache$ = doc(this).attr('rel')) ? cache$.toLowerCase() : void 0) === 'shortcut icon';\n      });\n      return tag.attr('href');\n    },\n    lang: function (doc) {\n      var cache$, l, tag, value;\n      l = null != (cache$ = doc('html')) ? cache$.attr('lang') : void 0;\n      if (!l) {\n        tag = doc('meta[name=lang]') || doc('meta[http-equiv=content-language]');\n        l = null != tag ? tag.attr('content') : void 0;\n      }\n      if (l) {\n        value = l.slice(0, +1 + 1 || 9e9);\n        if (/^[A-Za-z]{2}$/.test(value))\n          return value.toLowerCase();\n      }\n      return null;\n    },\n    description: function (doc) {\n      var cache$, cache$1, tag;\n      tag = doc(\"meta[name=description], meta[property='og:description']\");\n      if (null != tag && null != (cache$ = tag.first()) && null != (cache$1 = cache$.attr('content')))\n        return cache$1.trim();\n    },\n    keywords: function (doc) {\n      var tag;\n      tag = doc('meta[name=keywords]');\n      if (null != tag)\n        return tag.attr('content');\n    },\n    canonicalLink: function (doc) {\n      var tag;\n      tag = doc('link[rel=canonical]');\n      if (null != tag)\n        return tag.attr('href');\n    },\n    tags: function (doc) {\n      var elements, tags;\n      elements = doc(\"a[rel='tag']\");\n      if (elements.length === 0) {\n        elements = doc(\"a[href*='/tag/'], a[href*='/tags/'], a[href*='/topic/'], a[href*='?keyword=']\");\n        if (elements.length === 0)\n          return [];\n      }\n      tags = [];\n      elements.each(function () {\n        var el, tag;\n        el = doc(this);\n        tag = el.text().trim();\n        tag.replace(/[\\s\\t\\n]+/g, '');\n        if (tag && tag.length > 0)\n          return tags.push(tag);\n      });\n      return _.uniq(tags);\n    },\n    calculateBestNode: function (doc, lang) {\n      var bottomNegativescoreNodes, cnt, i, negativeScoring, nodesNumber, nodesToCheck, nodesWithText, parentNodes, startingBoost, topNode, topNodeScore;\n      topNode = null;\n      nodesToCheck = doc('p, pre, td');\n      startingBoost = 1;\n      cnt = 0;\n      i = 0;\n      parentNodes = [];\n      nodesWithText = [];\n      nodesToCheck.each(function () {\n        var highLinkDensity, node, textNode, wordStats;\n        node = doc(this);\n        textNode = node.text();\n        wordStats = stopwords(textNode, lang);\n        highLinkDensity = isHighlinkDensity(doc, node);\n        if (wordStats.stopwordCount > 2 && !highLinkDensity)\n          return nodesWithText.push(node);\n      });\n      nodesNumber = nodesWithText.length;\n      negativeScoring = 0;\n      bottomNegativescoreNodes = nodesNumber * .25;\n      _.each(nodesWithText, function (node) {\n        var booster, boostScore, negscore, parentNode, parentParentNode, textNode, upscore, wordStats;\n        boostScore = 0;\n        if (isBoostable(doc, node, lang) === true)\n          if (cnt >= 0) {\n            boostScore = 1 / startingBoost * 50;\n            startingBoost += 1;\n          }\n        if (nodesNumber > 15)\n          if (nodesNumber - i <= bottomNegativescoreNodes) {\n            booster = bottomNegativescoreNodes - (nodesNumber - i);\n            boostScore = -1 * Math.pow(booster, 2);\n            negscore = Math.abs(boostScore) + negativeScoring;\n            if (negscore > 40)\n              boostScore = 5;\n          }\n        textNode = node.text();\n        wordStats = stopwords(textNode, lang);\n        upscore = Math.floor(wordStats.stopwordCount + boostScore);\n        parentNode = node.parent();\n        updateScore(parentNode, upscore);\n        updateNodeCount(parentNode, 1);\n        if (parentNodes.indexOf(parentNode[0]) === -1)\n          parentNodes.push(parentNode[0]);\n        parentParentNode = parentNode.parent();\n        if (parentParentNode) {\n          updateNodeCount(parentParentNode, 1);\n          updateScore(parentParentNode, upscore / 2);\n          if (parentNodes.indexOf(parentParentNode[0]) === -1)\n            parentNodes.push(parentParentNode[0]);\n        }\n        cnt += 1;\n        return i += 1;\n      });\n      topNodeScore = 0;\n      _.each(parentNodes, function (e) {\n        var score;\n        score = getScore(doc(e));\n        if (score > topNodeScore) {\n          topNode = e;\n          topNodeScore = score;\n        }\n        if (topNode === null)\n          return topNode = e;\n      });\n      return doc(topNode);\n    }\n  };\n  getVideoAttrs = function (doc, node) {\n    var data, el;\n    el = doc(node);\n    return data = {\n      src: el.attr('src'),\n      height: el.attr('height'),\n      width: el.attr('width')\n    };\n  };\n  getObjectTag = function (doc, node) {\n    var src, srcNode, video;\n    srcNode = node.find('param[name=movie]');\n    if (!(srcNode.length > 0))\n      return null;\n    src = srcNode.attr('value');\n    video = getVideoAttrs(doc, node);\n    video.src = src;\n    return video;\n  };\n  biggestTitleChunk = function (title, splitter) {\n    var largeTextIndex, largeTextLength, titlePieces;\n    largeTextLength = 0;\n    largeTextIndex = 0;\n    titlePieces = title.split(splitter);\n    _.each(titlePieces, function (piece, i) {\n      if (piece.length > largeTextLength) {\n        largeTextLength = piece.length;\n        return largeTextIndex = i;\n      }\n    });\n    return titlePieces[largeTextIndex];\n  };\n  isBoostable = function (doc, node, lang) {\n    var boostable, maxStepsawayFromNode, minimumStopwordCount, nodes, stepsAway;\n    stepsAway = 0;\n    minimumStopwordCount = 5;\n    maxStepsawayFromNode = 3;\n    nodes = node.prevAll();\n    boostable = false;\n    nodes.each(function () {\n      var currentNode, currentNodeTag, paraText, wordStats;\n      currentNode = doc(this);\n      currentNodeTag = currentNode[0].name;\n      if (currentNodeTag === 'p') {\n        if (stepsAway >= maxStepsawayFromNode) {\n          boostable = false;\n          return false;\n        }\n        paraText = currentNode.text();\n        wordStats = stopwords(paraText, lang);\n        if (wordStats.stopwordCount > minimumStopwordCount) {\n          boostable = true;\n          return false;\n        }\n        return stepsAway += 1;\n      }\n    });\n    return boostable;\n  };\n  addSiblings = function (doc, topNode, lang) {\n    var baselinescoreSiblingsPara, sibs;\n    baselinescoreSiblingsPara = getSiblingsScore(doc, topNode, lang);\n    sibs = topNode.prevAll();\n    sibs.each(function () {\n      var currentNode, ps;\n      currentNode = doc(this);\n      ps = getSiblingsContent(doc, lang, currentNode, baselinescoreSiblingsPara);\n      return _.each(ps, function (p) {\n        return topNode.prepend('<p>' + p + '</p>');\n      });\n    });\n    return topNode;\n  };\n  getSiblingsContent = function (doc, lang, currentSibling, baselinescoreSiblingsPara) {\n    var potentialParagraphs, ps;\n    if (currentSibling[0].name === 'p' && currentSibling.text().length > 0) {\n      return [currentSibling];\n    } else {\n      potentialParagraphs = currentSibling.find('p');\n      if (potentialParagraphs === null) {\n        return null;\n      } else {\n        ps = [];\n        potentialParagraphs.each(function () {\n          var firstParagraph, highLinkDensity, paragraphScore, score, siblingBaselineScore, txt, wordStats;\n          firstParagraph = doc(this);\n          txt = firstParagraph.text();\n          if (txt.length > 0) {\n            wordStats = stopwords(txt, lang);\n            paragraphScore = wordStats.stopwordCount;\n            siblingBaselineScore = .3;\n            highLinkDensity = isHighlinkDensity(doc, firstParagraph);\n            score = baselinescoreSiblingsPara * siblingBaselineScore;\n            if (score < paragraphScore && !highLinkDensity)\n              return ps.push(txt);\n          }\n        });\n        return ps;\n      }\n    }\n  };\n  getSiblingsScore = function (doc, topNode, lang) {\n    var base, nodesToCheck, paragraphsNumber, paragraphsScore;\n    base = 1e5;\n    paragraphsNumber = 0;\n    paragraphsScore = 0;\n    nodesToCheck = topNode.find('p');\n    nodesToCheck.each(function () {\n      var highLinkDensity, node, textNode, wordStats;\n      node = doc(this);\n      textNode = node.text();\n      wordStats = stopwords(textNode, lang);\n      highLinkDensity = isHighlinkDensity(doc, node);\n      if (wordStats.stopwordCount > 2 && !highLinkDensity) {\n        paragraphsNumber += 1;\n        return paragraphsScore += wordStats.stopwordCount;\n      }\n    });\n    if (paragraphsNumber > 0)\n      base = paragraphsScore / paragraphsNumber;\n    return base;\n  };\n  updateScore = function (node, addToScore) {\n    var currentScore, newScore, scoreString;\n    currentScore = 0;\n    scoreString = node.attr('gravityScore');\n    if (scoreString)\n      currentScore = parseInt(scoreString);\n    newScore = currentScore + addToScore;\n    return node.attr('gravityScore', newScore);\n  };\n  updateNodeCount = function (node, addToCount) {\n    var countString, currentScore, newScore;\n    currentScore = 0;\n    countString = node.attr('gravityNodes');\n    if (countString)\n      currentScore = parseInt(countString);\n    newScore = currentScore + addToCount;\n    return node.attr('gravityNodes', newScore);\n  };\n  isHighlinkDensity = function (doc, node) {\n    var links, linkText, linkWords, numberOfLinks, numberOfLinkWords, numberOfWords, percentLinkWords, sb, score, txt, words;\n    links = node.find('a');\n    if (!(links.length > 0))\n      return false;\n    txt = node.text();\n    words = txt.split(' ');\n    numberOfWords = words.length;\n    sb = [];\n    links.each(function () {\n      return sb.push(doc(this).text());\n    });\n    linkText = sb.join(' ');\n    linkWords = linkText.split(' ');\n    numberOfLinkWords = linkWords.length;\n    numberOfLinks = links.length;\n    percentLinkWords = numberOfLinkWords / numberOfWords;\n    score = percentLinkWords * numberOfLinks;\n    return score >= 1;\n  };\n  getScore = function (node) {\n    var grvScoreString;\n    grvScoreString = node.attr('gravityScore');\n    if (!grvScoreString) {\n      return 0;\n    } else {\n      return parseInt(grvScoreString);\n    }\n  };\n  isTableAndNoParaExist = function (doc, e) {\n    var subParagraphs, subParagraphs2;\n    subParagraphs = e.find('p');\n    subParagraphs.each(function () {\n      var p, txt;\n      p = doc(this);\n      txt = p.text();\n      if (txt.length < 25)\n        return doc(p).remove();\n    });\n    subParagraphs2 = e.find('p');\n    if (subParagraphs2.length === 0 && !(e[0].name === 'td' || e[0].name === 'ul' || e[0].name === 'ol')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  isNodescoreThresholdMet = function (doc, node, e) {\n    var currentNodeScore, thresholdScore, topNodeScore;\n    topNodeScore = getScore(node);\n    currentNodeScore = getScore(e);\n    thresholdScore = topNodeScore * .08;\n    if (currentNodeScore < thresholdScore && !(e[0].name === 'td' || e[0].name === 'ul' || e[0].name === 'ol' || e[0].name === 'blockquote')) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  postCleanup = function (doc, targetNode, lang) {\n    var node;\n    node = addSiblings(doc, targetNode, lang);\n    node.children().each(function () {\n      var e, eTag;\n      e = doc(this);\n      eTag = e[0].name;\n      if (!(eTag === 'p' || eTag === 'a'))\n        if (isHighlinkDensity(doc, e) || isTableAndNoParaExist(doc, e) || !isNodescoreThresholdMet(doc, node, e)) {\n          return doc(e).remove();\n        }\n    });\n    return node;\n  };\n  cleanText = function (text) {\n    return text.replace(/[\\r\\n\\t]/g, ' ').replace(/\\s\\s+/g, ' ').replace(/<!--.+?-->/g, '').replace(/�/g, '').trim();\n  };\n  cleanTitle = function (title, delimiters) {\n    var titleText, usedDelimeter;\n    titleText = title || '';\n    usedDelimeter = false;\n    _.each(delimiters, function (c) {\n      if (titleText.indexOf(c) >= 0 && !usedDelimeter) {\n        titleText = biggestTitleChunk(titleText, c);\n        return usedDelimeter = true;\n      }\n    });\n    return cleanText(titleText);\n  };\n  rawTitle = function (doc) {\n    var cache$, cache$1, cache$2, cache$3, cache$4, cache$5, cache$6, cache$7, cache$8, cache$9, gotTitle, titleText;\n    gotTitle = false;\n    titleText = '';\n    _.each([\n      null != (cache$ = doc(\"meta[property='og:title']\")) && null != (cache$1 = cache$.first()) ? cache$1.attr('content') : void 0,\n      null != (cache$2 = doc(\"h1[class*='title']\")) && null != (cache$3 = cache$2.first()) ? cache$3.text() : void 0,\n      null != (cache$4 = doc('title')) && null != (cache$5 = cache$4.first()) ? cache$5.text() : void 0,\n      null != (cache$6 = doc('h1')) && null != (cache$7 = cache$6.first()) ? cache$7.text() : void 0,\n      null != (cache$8 = doc('h2')) && null != (cache$9 = cache$8.first()) ? cache$9.text() : void 0\n    ], function (candidate) {\n      if (candidate && candidate.trim() && !gotTitle) {\n        titleText = candidate.trim();\n        return gotTitle = true;\n      }\n    });\n    return titleText;\n  };\n}.call(this);\n","/home/travis/build/npmtest/node-npmtest-unfluff/node_modules/unfluff/lib/stopwords.js":"// Generated by CoffeeScript 2.0.0-beta7\nvoid function () {\n  var _, cache, candiateWords, fs, getFilePath, path, removePunctuation, stopwords;\n  path = require('path');\n  fs = require('fs');\n  _ = require('lodash');\n  cache = {};\n  getFilePath = function (language) {\n    return path.join(__dirname, '..', 'data', 'stopwords', 'stopwords-' + language + '.txt');\n  };\n  module.exports = stopwords = function (content, language) {\n    var count, filePath, overlappingStopwords, stopWords, strippedInput, words;\n    if (null == language)\n      language = 'en';\n    filePath = getFilePath(language);\n    if (!fs.existsSync(filePath)) {\n      console.error(\"WARNING: No stopwords file found for '\" + language + \"' - defaulting to English!\");\n      filePath = getFilePath('en');\n    }\n    if (cache.hasOwnProperty(language)) {\n      stopWords = cache[language];\n    } else {\n      stopWords = fs.readFileSync(filePath).toString().split('\\n');\n      cache[language] = stopWords;\n    }\n    strippedInput = removePunctuation(content);\n    words = candiateWords(strippedInput);\n    overlappingStopwords = [];\n    count = 0;\n    _.each(words, function (w) {\n      count += 1;\n      if (stopWords.indexOf(w.toLowerCase()) > -1)\n        return overlappingStopwords.push(w.toLowerCase());\n    });\n    return {\n      wordCount: count,\n      stopwordCount: overlappingStopwords.length,\n      stopWords: overlappingStopwords\n    };\n  };\n  removePunctuation = function (content) {\n    return content.replace(/[\\|\\@\\<\\>\\[\\]\\\"\\'\\.,-\\/#\\?!$%\\^&\\*\\+;:{}=\\-_`~()]/g, '');\n  };\n  candiateWords = function (strippedInput) {\n    return strippedInput.split(' ');\n  };\n}.call(this);\n","/home/travis/build/npmtest/node-npmtest-unfluff/node_modules/unfluff/lib/formatter.js":"// Generated by CoffeeScript 2.0.0-beta7\nvoid function () {\n  var _, addNewlineToBr, cleanParagraphText, convertToText, formatter, linksToText, removeFewwordsParagraphs, removeNegativescoresNodes, replaceWithText, stopwords, ulToText, XRegExp;\n  stopwords = require('./stopwords');\n  _ = require('lodash');\n  XRegExp = require('xregexp').XRegExp;\n  module.exports = formatter = function (doc, topNode, language) {\n    removeNegativescoresNodes(doc, topNode);\n    linksToText(doc, topNode);\n    addNewlineToBr(doc, topNode);\n    replaceWithText(doc, topNode);\n    removeFewwordsParagraphs(doc, topNode, language);\n    return convertToText(doc, topNode);\n  };\n  linksToText = function (doc, topNode) {\n    var nodes;\n    nodes = topNode.find('a');\n    return nodes.each(function () {\n      return doc(this).replaceWith(doc(this).html());\n    });\n  };\n  ulToText = function (doc, node) {\n    var nodes, txt;\n    nodes = node.find('li');\n    txt = '';\n    nodes.each(function () {\n      return txt = txt + ('\\n * ' + doc(this).text());\n    });\n    txt = txt + '\\n';\n    return txt;\n  };\n  replaceWithText = function (doc, topNode) {\n    var nodes;\n    nodes = topNode.find('b, strong, i, br, sup');\n    return nodes.each(function () {\n      return doc(this).replaceWith(doc(this).text());\n    });\n  };\n  cleanParagraphText = function (rawText) {\n    var txt;\n    txt = rawText.trim();\n    txt.replace(/[\\s\\t]+/g, ' ');\n    return txt;\n  };\n  convertToText = function (doc, topNode) {\n    var hangingText, nodes, regex, txt, txts;\n    txts = [];\n    nodes = topNode.contents();\n    hangingText = '';\n    nodes.each(function () {\n      var node, nodeName, nodeType, txt;\n      node = doc(this);\n      nodeType = node[0].type;\n      nodeName = node[0].name;\n      if (nodeType === 'text') {\n        hangingText += node.text();\n        return true;\n      } else if (nodeName === 'ul') {\n        hangingText += ulToText(doc, node);\n        return true;\n      }\n      if (hangingText.length > 0) {\n        txt = cleanParagraphText(hangingText);\n        txts = txts.concat(txt.split(/\\r?\\n/));\n        hangingText = '';\n      }\n      txt = cleanParagraphText(node.text());\n      txt = txt.replace(/(\\w+\\.)([A-Z]+)/, '$1 $2');\n      return txts = txts.concat(txt.split(/\\r?\\n/));\n    });\n    if (hangingText.length > 0) {\n      txt = cleanParagraphText(hangingText);\n      txts = txts.concat(txt.split(/\\r?\\n/));\n    }\n    txts = _.map(txts, function (txt) {\n      return txt.trim();\n    });\n    regex = XRegExp('[\\\\p{Number}\\\\p{Letter}]');\n    txts = _.filter(txts, function (txt) {\n      return regex.test(txt);\n    });\n    return txts.join('\\n\\n');\n  };\n  addNewlineToBr = function (doc, topNode) {\n    var brs;\n    brs = topNode.find('br');\n    return brs.each(function () {\n      var br;\n      br = doc(this);\n      return br.replaceWith('\\n\\n');\n    });\n  };\n  removeNegativescoresNodes = function (doc, topNode) {\n    var gravityItems;\n    gravityItems = topNode.find('*[gravityScore]');\n    return gravityItems.each(function () {\n      var item, score;\n      item = doc(this);\n      score = parseInt(item.attr('gravityScore')) || 0;\n      if (score < 1)\n        return doc(item).remove();\n    });\n  };\n  removeFewwordsParagraphs = function (doc, topNode, language) {\n    var allNodes;\n    allNodes = topNode.find('*');\n    return allNodes.each(function () {\n      var el, stopWords, tag, text, trimmed;\n      el = doc(this);\n      tag = el[0].name;\n      text = el.text();\n      stopWords = stopwords(text, language);\n      if ((tag !== 'br' || text !== '\\\\r') && stopWords.stopwordCount < 3 && el.find('object').length === 0 && el.find('embed').length === 0) {\n        return doc(el).remove();\n      } else {\n        trimmed = text.trim();\n        if (trimmed[0] === '(' && trimmed[trimmed.length - 1] === ')')\n          return doc(el).remove();\n      }\n    });\n  };\n}.call(this);\n","/home/travis/build/npmtest/node-npmtest-unfluff/node_modules/unfluff/lib/cleaner.js":"// Generated by CoffeeScript 2.0.0-beta7\nvoid function () {\n  var _, cleanArticleTags, cleanBadTags, cleanCodeBlocks, cleanEmTags, cleaner, cleanErrantLinebreaks, cleanParaSpans, cleanUnderlines, divToPara, getReplacementNodes, removeBodyClasses, removeDropCaps, removeNodesRegex, removeScriptsStyles, replaceWithPara;\n  _ = require('lodash');\n  module.exports = cleaner = function (doc) {\n    removeBodyClasses(doc);\n    cleanArticleTags(doc);\n    cleanEmTags(doc);\n    cleanCodeBlocks(doc);\n    removeDropCaps(doc);\n    removeScriptsStyles(doc);\n    cleanBadTags(doc);\n    removeNodesRegex(doc, /^caption$/);\n    removeNodesRegex(doc, / google /);\n    removeNodesRegex(doc, /^[^entry-]more.*$/);\n    removeNodesRegex(doc, /[^-]facebook/);\n    removeNodesRegex(doc, /facebook-broadcasting/);\n    removeNodesRegex(doc, /[^-]twitter/);\n    cleanParaSpans(doc);\n    cleanUnderlines(doc);\n    cleanErrantLinebreaks(doc);\n    divToPara(doc, 'div');\n    divToPara(doc, 'span');\n    return doc;\n  };\n  removeBodyClasses = function (doc) {\n    return doc('body').removeClass();\n  };\n  cleanArticleTags = function (doc) {\n    var articles;\n    articles = doc('article');\n    return articles.each(function () {\n      doc(this).removeAttr('id');\n      doc(this).removeAttr('name');\n      return doc(this).removeAttr('class');\n    });\n  };\n  cleanEmTags = function (doc) {\n    var ems;\n    ems = doc('em');\n    return ems.each(function () {\n      var images;\n      images = ems.find('img');\n      if (images.length === 0)\n        return doc(this).replaceWith(doc(this).html());\n    });\n  };\n  cleanCodeBlocks = function (doc) {\n    var nodes;\n    nodes = doc(\"[class*='highlight-'], pre code, code, pre, ul.task-list\");\n    return nodes.each(function () {\n      return doc(this).replaceWith(doc(this).text());\n    });\n  };\n  removeDropCaps = function (doc) {\n    var nodes;\n    nodes = doc('span[class~=dropcap], span[class~=drop_cap]');\n    return nodes.each(function () {\n      return doc(this).replaceWith(doc(this).html());\n    });\n  };\n  removeScriptsStyles = function (doc) {\n    var comments;\n    doc('script').remove();\n    doc('style').remove();\n    comments = doc('*').contents().filter(function () {\n      return this.type === 'comment';\n    });\n    return doc(comments).remove();\n  };\n  cleanBadTags = function (doc) {\n    var re, removeNodesRe, toRemove;\n    removeNodesRe = '^side$|combx|retweet|mediaarticlerelated|menucontainer|navbar|partner-gravity-ad|video-full-transcript|storytopbar-bucket|utility-bar|inline-share-tools|comment|PopularQuestions|contact|foot|footer|Footer|footnote|cnn_strycaptiontxt|cnn_html_slideshow|cnn_strylftcntnt|links|meta$|shoutbox|sponsor|tags|socialnetworking|socialNetworking|cnnStryHghLght|cnn_stryspcvbx|^inset$|pagetools|post-attributes|welcome_form|contentTools2|the_answers|communitypromo|runaroundLeft|subscribe|vcard|articleheadings|date|^print$|popup|author-dropdown|tools|socialtools|byline|konafilter|KonaFilter|breadcrumbs|^fn$|wp-caption-text|legende|ajoutVideo|timestamp|js_replies';\n    re = new RegExp(removeNodesRe, 'i');\n    toRemove = doc('*').filter(function () {\n      var cache$, cache$1, cache$2;\n      return (null != (cache$ = doc(this).attr('id')) ? cache$.match(re) : void 0) || (null != (cache$1 = doc(this).attr('class')) ? cache$1.match(re) : void 0) || (null != (cache$2 = doc(this).attr('name')) ? cache$2.match(re) : void 0);\n    });\n    return doc(toRemove).remove();\n  };\n  removeNodesRegex = function (doc, pattern) {\n    var toRemove;\n    toRemove = doc('div').filter(function () {\n      var cache$, cache$1;\n      return (null != (cache$ = doc(this).attr('id')) ? cache$.match(pattern) : void 0) || (null != (cache$1 = doc(this).attr('class')) ? cache$1.match(pattern) : void 0);\n    });\n    return doc(toRemove).remove();\n  };\n  cleanParaSpans = function (doc) {\n    var nodes;\n    nodes = doc('p span');\n    return nodes.each(function () {\n      return doc(this).replaceWith(doc(this).html());\n    });\n  };\n  cleanUnderlines = function (doc) {\n    var nodes;\n    nodes = doc('u');\n    return nodes.each(function () {\n      return doc(this).replaceWith(doc(this).html());\n    });\n  };\n  getReplacementNodes = function (doc, div) {\n    var childs, nodesToRemove, nodesToReturn, replacementText, txt;\n    replacementText = [];\n    nodesToReturn = [];\n    nodesToRemove = [];\n    childs = div.contents();\n    childs.each(function () {\n      var kid, kidText, kidTextNode, nextSiblingNode, outer, previousSiblingNode, replaceText, txt;\n      kid = doc(this);\n      if (kid[0].name === 'p' && replacementText.length > 0) {\n        txt = replacementText.join('');\n        nodesToReturn.push(txt);\n        replacementText = [];\n        return nodesToReturn.push(doc(kid).html());\n      } else if (kid[0].type === 'text') {\n        kidTextNode = kid;\n        kidText = kid.text();\n        replaceText = kidText.replace(/\\n/g, '\\n\\n').replace(/\\t/g, '').replace(/^\\s+$/g, '');\n        if (replaceText.length > 1) {\n          previousSiblingNode = kidTextNode.prev();\n          while (previousSiblingNode[0] && previousSiblingNode[0].name === 'a' && previousSiblingNode.attr('grv-usedalready') !== 'yes') {\n            outer = ' ' + doc.html(previousSiblingNode) + ' ';\n            replacementText.push(outer);\n            nodesToRemove.push(previousSiblingNode);\n            previousSiblingNode.attr('grv-usedalready', 'yes');\n            previousSiblingNode = previousSiblingNode.prev();\n          }\n          replacementText.push(replaceText);\n          nextSiblingNode = kidTextNode.next();\n          return function (accum$) {\n            while (nextSiblingNode[0] && nextSiblingNode[0].name === 'a' && nextSiblingNode.attr('grv-usedalready') !== 'yes') {\n              outer = ' ' + doc.html(nextSiblingNode) + ' ';\n              replacementText.push(outer);\n              nodesToRemove.push(nextSiblingNode);\n              nextSiblingNode.attr('grv-usedalready', 'yes');\n              accum$.push(previousSiblingNode = nextSiblingNode.next());\n            }\n            return accum$;\n          }.call(this, []);\n        }\n      } else {\n        return nodesToReturn.push(doc(kid).html());\n      }\n    });\n    if (replacementText.length > 0) {\n      txt = replacementText.join('');\n      nodesToReturn.push(txt);\n      replacementText = [];\n    }\n    _.each(nodesToRemove, function (n) {\n      return doc(n).remove();\n    });\n    return nodesToReturn;\n  };\n  replaceWithPara = function (doc, div) {\n    var divContent;\n    divContent = doc(div).html();\n    return doc(div).replaceWith('<p>' + divContent + '</p>');\n  };\n  divToPara = function (doc, domType) {\n    var divs, lastCount, tags;\n    divs = doc(domType);\n    lastCount = divs.length + 1;\n    tags = [\n      'a',\n      'blockquote',\n      'dl',\n      'div',\n      'img',\n      'ol',\n      'p',\n      'pre',\n      'table',\n      'ul'\n    ];\n    return divs.each(function () {\n      var div, html, items, replaceNodes;\n      div = doc(this);\n      items = div.find(tags.join(', '));\n      if (items.length === 0) {\n        return replaceWithPara(doc, this);\n      } else {\n        replaceNodes = getReplacementNodes(doc, div);\n        html = '';\n        _.each(replaceNodes, function (node) {\n          if (node !== '')\n            return html += '<p>' + node + '</p>';\n        });\n        div.empty();\n        return doc(div).replaceWith('' + html);\n      }\n    });\n  };\n  cleanErrantLinebreaks = function (doc) {\n    return doc('p').each(function () {\n      var c, node;\n      node = doc(this);\n      c = node.contents();\n      return doc(c).each(function () {\n        var n;\n        n = doc(this);\n        if (n[0].type === 'text')\n          return n.replaceWith(n.text().replace(/([^\\n])\\n([^\\n])/g, '$1 $2'));\n      });\n    });\n  };\n}.call(this);\n"}